name "orb_slam2"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "base"
import_types_from "frame_helper/Calibration.h"
import_types_from "frame_helper/FrameHelperTypes.h"
import_types_from "orb_slam2Types.hpp"

# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
# import_types_from "orb_slam2/CustomType.hpp"

using_library "ORB_SLAM2"
using_library "envire_core"
using_library "frame_helper"
using_library "pcl_common-1.7"
using_library "pcl_filters-1.7"
using_library "pcl_io-1.7"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
# import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the orb_slam2 namespace.
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #**************************
    #**** Task Properties *****
    #**************************
    property("calib_parameters","frame_helper/StereoCalibration").
        doc 'Intrinsic and extrinsic camera calibration parameters'+
            'for a full parameter list have a look at frame_helper'

    property("resize_algorithm","/frame_helper/ResizeAlgorithm",:INTER_LINEAR).
        doc "Resize algorithm which is used to scale the frame before it is written to the output port. "
            "allowed values are INTER_LINEAR, INTER_NEAREST, INTER_AREA, INTER_CUBIC, INTER_LANCZOS4, BAYER_RESIZE."

    property('pose_samples_out_source_frame', '/std/string').
        doc 'Frame of the slam pose (normally sensor frame or body frame)'

    property('keyframe_samples_out_source_frame', '/std/string').
        doc 'Last key frame pose of the slam (normally "last_kf")'+
            'The slam localization target frame is taken from the world frame of the transformer.'

    property("desired_period", "double").
        doc "Period to compute the image processing step in seconds. It cannot be higher than the input port period."+
            "In case of zero the period will be set to the input port period."

    property("velocity_residual_threshold", "double").
        doc "Velocity residual in [m/s] threshold for the odometry estimation."

    #*******************************
    #**** ORB-SLAM2 Properties *****
    #*******************************
    property('orb_vocabulary', '/std/string').
        doc 'Path to the file with the Bag-of-Words vocabulary for for the ORB descriptor.'

    property('orb_calibration', '/std/string').
        doc 'Path to the file with the camera calibration and ORB features parameters.'

    #*******************************
    #**** Dense Map Properties *****
    #*******************************
    property('point_cloud_size', 'std::vector<int>').
        doc 'PCL Point clouds needs to be organized. It will take this property to organize them.'

    property("output_ply", "/std/string", "").
        doc "resulting ply file"

    property('outlierfilter_config', 'pituki/OutlierRemovalFilterConfiguration').
        doc 'Configuration parameters for Radius Outlier Removal filter.'

    property('sensor_conditional_removal_config', 'pituki/ConditionalRemovalConfiguration').
        doc 'Configuration parameters for the conditional removal filter applied to sensor.'


    #******************************
    #******* Input ports  *********
    #******************************
    input_port('delta_pose_samples', '/base/samples/RigidBodyState').
        needs_reliable_connection.
        doc 'Odometry delta pose displacement.'

    input_port("left_frame", ro_ptr('base::samples::frame::Frame')).
        doc 'Left camera frame.'

    input_port("right_frame", ro_ptr('base::samples::frame::Frame')).
        doc 'Right camera frame.'

    input_port('point_cloud_samples', 'base/samples/Pointcloud').
        doc 'Point cloud samples.'

    #******************************
    #******* Transformer  *********
    #******************************
    transformer do
        transform "navigation", "world" # navigation in world in "Source IN target" convention
        transform "sensor", "body" # sensor in body in "Source IN target" convention
        align_port("delta_pose_samples", 0)
        align_port("left_frame", 0.5)
        align_port("right_frame", 0.5)
        align_port("point_cloud_samples", 0.5)
        max_latency(1.0)
    end

    #******************************
    #******* Output ports  ********
    #******************************
    output_port('pose_samples_out', '/base/samples/RigidBodyState').
        doc 'Corrected estimated robot pose from the SLAM.'

    output_port('keyframe_pose_samples_out', '/base/samples/RigidBodyState').
        doc 'Pose for the last Keyframe in the SLAM.'

    #******************************
    #******* Debug Ports **********
    #******************************
    property('output_debug', 'bool', false).
        doc 'Set to true if output debug information is desirable.'

    output_port("frame_samples_out",  ro_ptr('base::samples::frame::Frame')).
        doc 'Image frame with correspondences tracked features.'

    output_port("features_map_out",  "base::samples::Pointcloud").
        doc 'Sparse Map with all the features'

    output_port('keyframes_trajectory_out', 'std::vector< base::Waypoint >').
        doc 'Trajectory for Keyframes in the SLAM.'

    output_port('allframes_trajectory_out', 'std::vector< base::Waypoint >').
        doc 'Trajectory for all Frames in the SLAM.'

    output_port('task_info_out', 'orb_slam2/Information').
        doc 'SLAM information.'

    port_driven

end

